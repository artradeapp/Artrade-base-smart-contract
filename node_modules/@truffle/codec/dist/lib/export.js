"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compatibleNativizeEventArgs = exports.compatibleNativizeReturn = exports.compatibleNativize = exports.nativize = exports.ResultInspector = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("codec:export");
const Abify = __importStar(require("./abify"));
const inspect_1 = require("./format/utils/inspect");
Object.defineProperty(exports, "ResultInspector", { enumerable: true, get: function () { return inspect_1.ResultInspector; } });
Object.defineProperty(exports, "nativize", { enumerable: true, get: function () { return inspect_1.nativize; } });
/**
 * This function is similar to [[Format.Utils.Inspect.nativize|nativize]], but
 * is intended to match the way that Truffle Contract currently returns values
 * (based on the Ethers decoder).  As such, it only handles ABI types, and in
 * addition does not handle the types fixed, ufixed, or function.  Note that in
 * these cases it returns `undefined` rather than throwing, as we want this
 * function to be used in contexts where it had better not throw.  It also does
 * not handle circularities, for similar reasons.
 *
 * To handle numeric types, this function takes an optional second argument,
 * numberFormatter, that tells it how to handle numbers; this function should
 * take a BigInt as input.  By default, this function will be the identity,
 * and so numbers will be represented as BigInts.
 *
 * Note that this function begins by calling abify, so out-of-range enums (that
 * aren't so out-of-range as to be padding errors) will not return `undefined`.
 * Out-of-range booleans similarly will return true rather than `undefined`.
 * However, other range errors may return `undefined`; this may technically be a
 * slight incompatibility with existing behavior, but should not be relevant
 * except in quite unusual cases.
 *
 * In order to match the behavior for tuples, tuples will be transformed into
 * arrays, but named entries will additionally be keyed by name.  Moreover,
 * indexed variables of reference type will be nativized to an undecoded hex
 * string.
 */
function compatibleNativize(result, userDefinedTypes, numberFormatter = x => x) {
    return compatibleNativizeAbified(Abify.abifyResult(result, userDefinedTypes), numberFormatter);
}
exports.compatibleNativize = compatibleNativize;
function compatibleNativizeAbified(result, numberFormatter) {
    if (result.kind === "error") {
        switch (result.error.kind) {
            case "IndexedReferenceTypeError":
                //strictly speaking for arrays ethers will fail to decode
                //rather than do this, but, eh
                return result.error.raw;
            default:
                return undefined;
        }
    }
    switch (result.type.typeClass) {
        case "uint":
        case "int":
            const asBN = (result).value.asBN;
            //BN is binary-based, so we convert by means of a hex string in order
            //to avoid having to do a binary-decimal conversion and back :P
            const asBigInt = !asBN.isNeg()
                ? BigInt("0x" + asBN.toString(16))
                : -BigInt("0x" + asBN.neg().toString(16)); //can't directly make negative BigInt from hex string
            return numberFormatter(asBigInt);
        case "bool":
            return result.value.asBoolean;
        case "bytes":
            return result.value.asHex;
        case "address":
            return result.value.asAddress;
        case "string": {
            let coercedResult = result;
            switch (coercedResult.value.kind) {
                case "valid":
                    return coercedResult.value.asString;
                case "malformed":
                    // this will turn malformed utf-8 into replacement characters (U+FFFD) (WARNING)
                    // note we need to cut off the 0x prefix
                    return Buffer.from(coercedResult.value.asHex.slice(2), "hex").toString();
            }
        }
        case "array":
            return result.value.map(value => compatibleNativizeAbified(value, numberFormatter));
        case "tuple":
            //in this case, we need the result to be an array, but also
            //to have the field names (where extant) as keys
            const nativized = [];
            for (const { name, value } of result.value) {
                const nativizedValue = compatibleNativizeAbified(value, numberFormatter);
                nativized.push(nativizedValue);
                if (name) {
                    nativized[name] = nativizedValue;
                }
            }
            return nativized;
        case "fixed":
        case "ufixed":
        case "function":
            return undefined;
    }
}
/**
 * This function is similar to [[compatibleNativize]], but takes
 * a [[ReturndataDecoding]].  If there's only one returned value, it
 * will be run through compatibleNativize but otherwise unaltered;
 * otherwise the results will be put in an object.
 *
 * Note that if the ReturndataDecoding is not a [[ReturnDecoding]],
 * this will just return `undefined`.
 */
function compatibleNativizeReturn(decoding, userDefinedTypes, numberFormatter = x => x) {
    if (decoding.kind !== "return") {
        return undefined;
    }
    if (decoding.arguments.length === 1) {
        return compatibleNativize(decoding.arguments[0].value, userDefinedTypes, numberFormatter);
    }
    const result = {};
    for (let i = 0; i < decoding.arguments.length; i++) {
        const { name, value } = decoding.arguments[i];
        const nativized = compatibleNativize(value, userDefinedTypes, numberFormatter);
        result[i] = nativized;
        if (name) {
            result[name] = nativized;
        }
    }
    return result;
}
exports.compatibleNativizeReturn = compatibleNativizeReturn;
/**
 * This function is similar to [[compatibleNativize]], but takes
 * a [[LogDecoding]], and puts the results in an object.  Note
 * that this does not return the entire event info, but just the
 * `args` for the event.
 */
function compatibleNativizeEventArgs(decoding, userDefinedTypes, numberFormatter = x => x) {
    const result = {};
    for (let i = 0; i < decoding.arguments.length; i++) {
        const { name, value } = decoding.arguments[i];
        const nativized = compatibleNativize(value, userDefinedTypes, numberFormatter);
        result[i] = nativized;
        if (name) {
            result[name] = nativized;
        }
    }
    //note: if you have an argument named __length__, what ethers
    //actually does is... weird.  we're just going to do this instead,
    //which is simpler and probably more useful, even if it's not strictly
    //the same (I *seriously* doubt anyone was relying on the old behavior,
    //because it's, uh, not very useful)
    result.__length__ = decoding.arguments.length;
    return result;
}
exports.compatibleNativizeEventArgs = compatibleNativizeEventArgs;
//# sourceMappingURL=export.js.map